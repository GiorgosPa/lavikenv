# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

export CFG_INVENIO_SRCDIR=$HOME/private/src/invenio
export CFG_INSPIRE_SRCDIR=$HOME/private/src/inspire
export CFG_INVENIO_PREFIX=/opt/cds-invenio
export GIT_EDITOR='subl -w'
# If not running interactively, don't do anything
[ -z "$PS1" ] && return


JAVA_HOME=/usr/local/java/jre1.7.0_45
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin
export JAVA_HOME
export PATH
export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=lcd_hrgb -Dswing.aatext=true -Dsun.java2d.xrender=true'

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi



# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;35m\]\u\[\033[01;30m\]@\[\033[01;32m\]\h\[\033[00m\]:\n\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# This function from: https://wiki.archlinux.org/index.php/Color_Bash_Prompt_%28%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9%29#Wolfman.27s
##################################################
# Fancy PWD display function
##################################################
# The home directory (HOME) is replaced with a ~
# The last pwdmaxlen characters of the PWD are displayed
# Leading partial directory names are striped off
# /home/me/stuff          -> ~/stuff               if USER=me
# /usr/share/big_dir_name -> ../share/big_dir_name if pwdmaxlen=20
##################################################
bash_prompt_shortener() {
    # How many characters of the $PWD should be kept
    local pwdmaxlen=25
    # Indicate that there has been dir truncation
    local trunc_symbol=".."
    local dir=${PWD##*/}
    pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
    NEW_PWD=${PWD/#$HOME/\~}
    local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
    if [ ${pwdoffset} -gt "0" ]
    then
        NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
        NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
    fi
}

parse_git_branch() {
    BGIT_PS=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')
}

function setPrompt {
  COLOR1="\[\033[1;35m\]"     #First color
  COLOR2="\[\033[0;35m\]"     #Second color
  COLOR3="\[\033[0;32m\]"     #Third color

  NO_COLOR="\[\033[0m\]"      #Transparent - don't change

  case $TERM in 
    xterm*)
      TITLEBAR="\[\033]0;\h - \w\007\]"
      ;;
    *)
      TITLEBAR=""
      ;;
  esac
  local dash_open="${COLOR1}-${COLOR2}-"
  local dash_close="${COLOR2}-${COLOR1}>"
  local spacer="${COLOR2}-"
  local jobs_and_history="${COLOR2}(${COLOR1}\!${COLOR2}:${COLOR1}\j${COLOR2})"
  local user_host="${COLOR2}(${COLOR1}\u${COLOR2}@${COLOR1}\h${COLOR2})"
  local host="${COLOR2}(${COLOR1}\H${COLOR2})"
  local root_or_not="${COLOR2}(${COLOR1}\\\$${COLOR2})"
  local cwd="${COLOR2}(${COLOR1}\w${COLOR2})"
  
  #local gitstuff=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')
  #PS1="${TITLEBAR}${COLOR1}-${COLOR2}-(${COLOR1}\!${COLOR2}:${COLOR1}\j${COLOR2})-(${COLOR1}\w${COLOR2})-${COLOR1}-\n-${COLOR2}-(${COLOR1}\u${COLOR2}@${COLOR1}\H${COLOR2})-(${COLOR1}\\\$${COLOR2})-${COLOR1}- ${NO_COLOR}"
  #PS1="${TITLEBAR}${dash_open}${cwd}${spacer}${root_or_not}${dash_close}\n${dash_open}${jobs_and_history}${spacer}${host}${dash_close}${NO_COLOR} "
  #PS2="${COLOR2}--${COLOR1}- ${NO_COLOR}"
  if [ -n "$SSH_CLIENT" ]
  then
      PS1="${TITLEBAR}${BGIT_PS}${user_host}${COLOR3}"'${NEW_PWD}'"${COLOR2}:\n\$${NO_COLOR} "
  else
      PS1="${TITLEBAR}${BGIT_PS}${COLOR1}"'${NEW_PWD}'"${COLOR2}:\n\$${NO_COLOR} "
  fi
  PS2="$spacer$dash_close$NO_COLOR "
}

bash_prompt_shortener
setPrompt

#Determine and display the exit Status of the last command, if non-zero.
function checkExitStatus() {
  local status="$?"
  local signal=""
  local COLOR1="\033[0;0;33m"     #First color
  local COLOR2="\033[0;0;36m"     #Second color
  local NO_COLOR="\033[0m"        #Transparent - don't change

  if [ ${status} -ne 0 -a ${status} != 128 ]; then
    # If process exited by a signal, determine name of signal.
    if [ ${status} -gt 128 ]; then
      signal="$(builtin kill -l $((${status} - 128)) 2>/dev/null)"
      if [ "$signal" ]; then
        signal="$signal"
      fi
    fi
    echo -e "${COLOR1}[Exit ${COLOR2}${status} ${signal}${COLOR1}]${NO_COLOR}" 1>&2
    #echo -ne "${COLOR1}[Exit ${COLOR2}${status}${COLOR1} ${COLOR2}${signal}${COLOR1}]${NO_COLOR} " 1>&2
    fi
  return 0
}
print_prompt_time() {
    printf "%*s\r" $(tput cols) "$(date '+%T')"
}

promptCmd() {
    bash_prompt_shortener
    parse_git_branch
    checkExitStatus
    setPrompt
    print_prompt_time
    # Enable virtualenv
    if [ -n "$VIRTUAL_ENV" ]
    then
      if [ "`basename \"$VIRTUAL_ENV\"`" = "__" ] ; then
        # special case for Aspen magic directories
        # see http://www.zetadev.com/software/aspen/
        PS1="[`basename \`dirname \"$VIRTUAL_ENV\"\``] $PS1"
      else
        PS1="(`basename \"$VIRTUAL_ENV\"`)$PS1"
      fi
      export PS1
    fi
}

PROMPT_COMMAND=promptCmd

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

cl() {
  if [ -d $1 ]
  then
    cd $1
    ls -la
  else
    cd $HOME
    ls -la
  fi
}


# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

export EDITOR=vim
export VISUAL=vim
export CFG_INVENIO_SRCDIR=$HOME/private/src/invenio
export CFG_INSPIRE_SRCDIR=$HOME/private/src/inspire

export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python

# Enable Invenio devscripts
if [ -n "$SSH_CLIENT" ]
then
    export PATH=/usr/local/bin:$PATH
    export CFG_INVENIO_SRCDIR=$HOME/private/src/invenio
    export CFG_INSPIRE_SRCDIR=$HOME/private/src/inspire
    export CFG_INVENIO_PREFIX=/opt/cds-invenio
    export CFG_INVENIO_USER=apache
    export CFG_INVENIO_BIBTASK_USER=jlavik
    export CFG_INSPIRE_BIBTASK_USER=jlavik
    export PATH=$CFG_INVENIO_PREFIX/bin:$PATH
else
    export PATH=$HOME/src/invenio-devscripts:$PATH
    export PATH=$HOME/src/inspire-devscripts:$PATH
    export PATH=/usr/local/bin:$PATH
    export CFG_INVENIO_SRCDIR=$HOME/src/invenio
    export CFG_INSPIRE_SRCDIR=$HOME/src/inspire
    export CFG_INVENIO_PREFIX=/opt/invenio
    export CFG_INVENIO_HOSTNAME=`hostname`
    export CFG_INVENIO_DOMAINNAME=cern.ch
    export CFG_INVENIO_PORT_HTTP=4000
    export CFG_INVENIO_PORT_HTTPS=4000
    export CFG_INVENIO_USER=`whoami`
    export CFG_INVENIO_BIBTASK_USER=admin
    export CFG_INSPIRE_BIBTASK_USER=admin
    export CFG_INVENIO_ADMIN=`whoami`@cern.ch
    export CFG_INVENIO_VIRTUALENVS=~/envs
    export PATH=$CFG_INVENIO_PREFIX/bin:$PATH
    export WORKON_HOME=$CFG_INVENIO_VIRTUALENVS
    source /usr/local/bin/virtualenvwrapper.sh
fi

export MYSQL_ADMIN_USER=root
export MYSQL_ADMIN_PASS=mysql
